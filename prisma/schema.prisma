// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  workspaces    Workspaces[]    @relation("UserWorkspaces")
  shortenerUrls ShortenerUrls[]
}

model Workspaces {
  id         String       @id @default(uuid())
  name       String
  ownerId    Int
  created_at DateTime  @default(now())
  update_at  DateTime  @default(now())
  deleted_at DateTime?

  ownerUser     Users           @relation("UserWorkspaces", fields: [ownerId], references: [id])
  shortenerUrls ShortenerUrls[]
}

model ShortenerUrls {
  id          Int       @id @default(autoincrement())
  userId      Int?
  workspaceId String?
  shortCode   String    @unique
  originUrl   String
  shortenUrl  String
  clicks      Int       @default(0)
  created_at  DateTime  @default(now())
  update_at   DateTime  @default(now())
  deleted_at  DateTime?
  expires_at  DateTime?

  user      Users?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspaces? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}
